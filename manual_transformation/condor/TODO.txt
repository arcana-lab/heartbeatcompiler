1. generate baseline binaries
  - path to source file ${root}/manual_transformation/benchmarks/${bench}/[baseline, openmp, clikplus, heartbeat].cpp
  - [Yian] Makefile for compilation process: make [ DNO_PRINTING ]
  - [Yian] If we compile the source file for different version, i.e, different input size, different scheduling policy, these variants will be supplied through MACRO, I will list all the available MACRO used for different scheduling techniques

2. copy generated binaries
  - path: ${root}/manual_transformation/results/[current_machine, authors_machine]/binary/${bench}/[baseline, openmp, clikplus, heartbeat]/${scheduling_technique}${_version}

3. run binaries to collect baseline time resutls [5 runs]
  - 1 physical core on fix
  - /usr/bin/time -p taskset -c 0 make run [MACRO] to collect time result >> ${scheduling_technique}${_version}.txt
  - ${root}/manual_transformation/results/time/${bench}/[baseline, openmp, clikplus, heartbeat]/${scheduling_technique}${_version}.txt

4. run binaries to collect baseline LLC-load-missses and dynamic instructions committed [5 runs]
  - perf stat -e LLC-load-misses ${command_to_run}
  - ${root}/manual_transformation/results/LLC-load-misses/[baseline, openmp, clikplus, heartbeat]/${scheduling_technique}${_version}.txt
